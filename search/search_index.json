{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Toggl CLI \u00b6 Toggl CLI is a Python utility which consists of Command-Line-Interface and Python's API Wrappers to interact with Toggl API. Each part is discussed in detail in corresponding section. Originally written by D. Robert Adams , currently maintained by Adam Uhlir . Installation \u00b6 To install Toggl CLI the easiest way is to use pip: $ pip install togglCli To use edge master you can also clone the repo and install it directly: $ git clone https://github.com/AuHau/toggl-cli $ cd toggl-cli $ pip install . Master branch should contain mostly working version, but it is not guaranteed. Configuration \u00b6 Toggl CLI heavily depends on user's configuration. Upon first usage of the CLI the user is taken through bootstrap process where he is asked questions regarding the desired settings and authentication credentials. The final configuration is stored as configuration file at ~/.togglrc . If user select's to enter username & password, then the bootstrap process will convert it into API token which is then stored. Bootstrap on Windows Currently the bootstrap process is not available for Windows users. Upon the first usage of the CLI, Toggl CLI will create dummy config file and exit in order for user to configure it before next run. Use the bellow explanations to see available options. Plaintext credentials By default the authentication credentials are stored in plain text in your configuration file! Be aware of that! Migrations \u00b6 If you have used original version of Toggl CLI and have proper config file, upon the first run of the new version, Toggl CLI will try to migrate it into new format. Possible settings \u00b6 Name Type Default Description date_format string L Setting which specifies the format in which all the dates will be printed. For syntax see Pendulum's doc . datetime_format string LTS L Setting which specifies the format in which all the datetimes will be printed. For syntax see Pendulum's doc . time_format string LTS Setting which specifies the format in which all the times will be printed. For syntax see Pendulum's doc . day_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the day (True) or month (False). year_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the year. If True, the first number is taken to be the year, otherwise the last number is taken to be the year. file_logging bool False Turns on/off logging into file specified by file_logging_path variable. file_logging_path string '' Specifies path where the logs will be stored. retries integer 2 In case when the HTTP API call is interrupted or the API rejects it because of throttling reasons, the tool will use exponential back-off with number of retries specified by this value. tz string None Timezone setting. If 'local' value is used then timezone from system's settings is used. If None, then timezone from Toggl's setting is used. theme string None Define theme to be used in the CLI. See Themes section for possible values. default_wid integer None ID of default workspace to be used. If left empty then Toggl's configuration is used.","title":"About"},{"location":"#welcome-to-toggl-cli","text":"Toggl CLI is a Python utility which consists of Command-Line-Interface and Python's API Wrappers to interact with Toggl API. Each part is discussed in detail in corresponding section. Originally written by D. Robert Adams , currently maintained by Adam Uhlir .","title":"Welcome to Toggl CLI"},{"location":"#installation","text":"To install Toggl CLI the easiest way is to use pip: $ pip install togglCli To use edge master you can also clone the repo and install it directly: $ git clone https://github.com/AuHau/toggl-cli $ cd toggl-cli $ pip install . Master branch should contain mostly working version, but it is not guaranteed.","title":"Installation"},{"location":"#configuration","text":"Toggl CLI heavily depends on user's configuration. Upon first usage of the CLI the user is taken through bootstrap process where he is asked questions regarding the desired settings and authentication credentials. The final configuration is stored as configuration file at ~/.togglrc . If user select's to enter username & password, then the bootstrap process will convert it into API token which is then stored. Bootstrap on Windows Currently the bootstrap process is not available for Windows users. Upon the first usage of the CLI, Toggl CLI will create dummy config file and exit in order for user to configure it before next run. Use the bellow explanations to see available options. Plaintext credentials By default the authentication credentials are stored in plain text in your configuration file! Be aware of that!","title":"Configuration"},{"location":"#migrations","text":"If you have used original version of Toggl CLI and have proper config file, upon the first run of the new version, Toggl CLI will try to migrate it into new format.","title":"Migrations"},{"location":"#possible-settings","text":"Name Type Default Description date_format string L Setting which specifies the format in which all the dates will be printed. For syntax see Pendulum's doc . datetime_format string LTS L Setting which specifies the format in which all the datetimes will be printed. For syntax see Pendulum's doc . time_format string LTS Setting which specifies the format in which all the times will be printed. For syntax see Pendulum's doc . day_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the day (True) or month (False). year_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the year. If True, the first number is taken to be the year, otherwise the last number is taken to be the year. file_logging bool False Turns on/off logging into file specified by file_logging_path variable. file_logging_path string '' Specifies path where the logs will be stored. retries integer 2 In case when the HTTP API call is interrupted or the API rejects it because of throttling reasons, the tool will use exponential back-off with number of retries specified by this value. tz string None Timezone setting. If 'local' value is used then timezone from system's settings is used. If None, then timezone from Toggl's setting is used. theme string None Define theme to be used in the CLI. See Themes section for possible values. default_wid integer None ID of default workspace to be used. If left empty then Toggl's configuration is used.","title":"Possible settings"},{"location":"api/","text":"API wrapper classes \u00b6 Except Command Line Interface, Toggl also consists of wrapper classes to interact with Toggl's API. They wrappers are placed in toggl.api package. There are these classes available: Client Workspace Project User WorkspaceUser ProjectUser TimeEntry Task Tag Currently there is no API reference available, for details see directly the code which is well documented and readable here . Configuration \u00b6 As described at Configuration section Toggl CLI heavily depends on configuration, which is also true for the API wrappers. You can specify the config object to be used for the API calls passing the object to TogglSet's methods and entities's constructor using config=<config object> (examples bellow). If no config object is passed, the default config is parsed from config file at ~/.togglrc . If you want to use some config object across whole application, you can replace the default config object using call utils.Config.set_default(<config_obj>) (example bellow). It is recommended to put this step as part of bootstraping of your application. Examples \u00b6 The API wrapper classes follow similar design pattern like Django's ORM classes. Here are some examples of the API calls. from toggl import api , utils # All clients from default config which is placed under ~/.togglrc all_clients = api . Client . objects . all () for client in all_clients : print ( client . name ) specific_client = api . Client . objects . get ( 123 ) project = api . Project ( name = 'New project!' ) project . client = specific_client project . save () # Creating new instance does not automatically save the entity, you have to call save() to do that. update_project = api . Project () # Loads config from different place then ~/.togglrc loaded_config = utils . Config . factory ( '/some/path/to/config' ) new_task_with_different_config = api . Task ( name = 'some name' , config = loaded_config ) new_task_with_different_config . save () # Creates empty config without any file loading, at least API token/User credentials needs to be set afterwards empty_config = utils . Config . factory ( None ) empty_config . api_token = 'users token' # Lets update a Task some_task = api . Task . objects . get ( 123 , config = empty_config ) # Raises TogglNotAllowedException as tracked_seconds is read-only some_task . tracked_seconds = 123 some_task . name = 'new task name' some_task . save () # Again entity needs to be saved to propagate the changes to server # Getting default config object default_config = utils . Config . factory () # Set new default config utils . Config . set_default ( empty_config ) assert utils . Config . factory () is empty_config # ==> True","title":"API Wrappers"},{"location":"api/#api-wrapper-classes","text":"Except Command Line Interface, Toggl also consists of wrapper classes to interact with Toggl's API. They wrappers are placed in toggl.api package. There are these classes available: Client Workspace Project User WorkspaceUser ProjectUser TimeEntry Task Tag Currently there is no API reference available, for details see directly the code which is well documented and readable here .","title":"API wrapper classes"},{"location":"api/#configuration","text":"As described at Configuration section Toggl CLI heavily depends on configuration, which is also true for the API wrappers. You can specify the config object to be used for the API calls passing the object to TogglSet's methods and entities's constructor using config=<config object> (examples bellow). If no config object is passed, the default config is parsed from config file at ~/.togglrc . If you want to use some config object across whole application, you can replace the default config object using call utils.Config.set_default(<config_obj>) (example bellow). It is recommended to put this step as part of bootstraping of your application.","title":"Configuration"},{"location":"api/#examples","text":"The API wrapper classes follow similar design pattern like Django's ORM classes. Here are some examples of the API calls. from toggl import api , utils # All clients from default config which is placed under ~/.togglrc all_clients = api . Client . objects . all () for client in all_clients : print ( client . name ) specific_client = api . Client . objects . get ( 123 ) project = api . Project ( name = 'New project!' ) project . client = specific_client project . save () # Creating new instance does not automatically save the entity, you have to call save() to do that. update_project = api . Project () # Loads config from different place then ~/.togglrc loaded_config = utils . Config . factory ( '/some/path/to/config' ) new_task_with_different_config = api . Task ( name = 'some name' , config = loaded_config ) new_task_with_different_config . save () # Creates empty config without any file loading, at least API token/User credentials needs to be set afterwards empty_config = utils . Config . factory ( None ) empty_config . api_token = 'users token' # Lets update a Task some_task = api . Task . objects . get ( 123 , config = empty_config ) # Raises TogglNotAllowedException as tracked_seconds is read-only some_task . tracked_seconds = 123 some_task . name = 'new task name' some_task . save () # Again entity needs to be saved to propagate the changes to server # Getting default config object default_config = utils . Config . factory () # Set new default config utils . Config . set_default ( empty_config ) assert utils . Config . factory () is empty_config # ==> True","title":"Examples"},{"location":"cli/","text":"Command Line Interface \u00b6 Upon installation of Toggl CLI with pip, it exposes the command line interface under binary toggl . This section will explain the high-level overview of the CLI and several features. For detailed overview of all options for each command, please use --help parameter. Virtualenv and other modifications of Python environment As the toggl binary depends on the Python's environment, any action which would modify this environment, such as usage of virtualenv etc. might disable access to this binary. It depends on which environment you have installed toggl in. Commands overview \u00b6 The CLI is designed to have several sub-commends which each corresponds to adequate section of the API. Here is presented brief overview of the hierarchy. toggl \u251c\u2500\u2500 add --- adds new time entry \u251c\u2500\u2500 clients \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 timezone --- sets/display timezone setting \u2502 \u251c\u2500\u2500 workspace --- sets/display default workspace setting \u2502 \u2514\u2500\u2500 completion \u2502 \u251c\u2500\u2500 show --- displays what will be added to your shell's rc file \u2502 \u2514\u2500\u2500 install --- enable commands completion for your shell \u251c\u2500\u2500 continue --- continue existing/last time entry \u251c\u2500\u2500 goal --- tracks today's time until your goal is reached \u251c\u2500\u2500 ls --- lists last time entries \u251c\u2500\u2500 now --- show/update currently runnig time entry \u251c\u2500\u2500 project_users --- list all project users in workspace \u251c\u2500\u2500 projects \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 rm --- delete a time entry \u251c\u2500\u2500 start --- starts new time entry \u251c\u2500\u2500 stop --- stops running time entry \u251c\u2500\u2500 sum --- shows summary of totally tracked time based on days \u251c\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 tags \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 signup --- creates new user \u251c\u2500\u2500 workspaces \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 invite --- invites user into the current workspace \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u2514\u2500\u2500 www --- opens web client Themes \u00b6 Toggl CLI supports themes in order to be readable in all terminal settings. You can configure it as part of config file using theme option. The possible values are: plain for plain theme without any colors light for light based theme dark for dark based theme Shell completion \u00b6 Toggl CLI supports commands/options completion for bash , zsh , PowerShell and fish shells. To enable the completion run toggl config completion install . This command will install completion based on your current shell, it mostly consist of adding _TOGGL_COMPLETE variable to your rc file. If you want to inspect details you can run toggl config completion show . Date/time formats \u00b6 Important part of the CLI is parsing of times & dates. Toggl CLI uses in background of dateutil library and it best-effort function dateutil.parse() . This function aims to guess the format of your time or date on best-effort bases. It is possible to influence behaviour of this parser through day_first and year_first settings in config file. See possible settings . Examples: 10:10 ==> <current date> 10:10 14:10 ==> current date> 14:10 2:10 PM ==> current date> 14:10 Nov 12 10:11 AM ==> <current year>-11-12 10:11 # For only day/month dates the first is always day and second is always month 12.11 10:11 ==> <current year>-11-12 10:11 11.12 10:11 ==> <current year>-12-11 10:11 # For ful date (day/month/year) the day_first/year_first setting is applied 12.11.18 10:11 ==> 2018-12-11 10:11 12.11.18 10:11 ==> 2018-11-12 10:11 # When day_first=True 12.11.18 10:11 ==> 2012-11-18 10:11 # When year_first=True More examples can be found at pendulum's documentation Duration formats \u00b6 Another important part of the CLI is duration syntax for specifying time entries durations if desired. Example: 5h2m10s - 5 hours 2 minutes 10 seconds. Syntax is as follow: 'd' : days 'h' : hours 'm' : minutes 's' : seconds Environmental variables \u00b6 It is possible to specify several options for the CLI commands through environmental variables. This can for example nicely play out for directory specific settings (for example for projects) with direnv tool. Generally this mechanism is available for commands that create new entities. Values specified through this way have priority over config values. You can see which options can be specified in command's help page where at the option's help is used (ENV: <name of variable>) syntax. Bellow you can see general overview of the variables: TOGGL_CONFIG - Defines which config file should be used. Should be absolute path. By default ~/.togglrc is used. TOGGL_WORKSPACE - Defines workspace to be used for the command, can be ID or Name of the Workspace. TOGGL_TASK - Defines task to be used, can be ID or Name of the Task. TOGGL_PROJECT - Defines project to be used, can be ID or Name of the Project. TOGGL_API_TOKEN - Defines Toggl's account which will be used for the API calls. TOGGL_USERNAME - Defines Toggl's account which will be used for the API calls. TOGGL_PASSWORD - Defines Toggl's account which will be used for the API calls.","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"Upon installation of Toggl CLI with pip, it exposes the command line interface under binary toggl . This section will explain the high-level overview of the CLI and several features. For detailed overview of all options for each command, please use --help parameter. Virtualenv and other modifications of Python environment As the toggl binary depends on the Python's environment, any action which would modify this environment, such as usage of virtualenv etc. might disable access to this binary. It depends on which environment you have installed toggl in.","title":"Command Line Interface"},{"location":"cli/#commands-overview","text":"The CLI is designed to have several sub-commends which each corresponds to adequate section of the API. Here is presented brief overview of the hierarchy. toggl \u251c\u2500\u2500 add --- adds new time entry \u251c\u2500\u2500 clients \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 timezone --- sets/display timezone setting \u2502 \u251c\u2500\u2500 workspace --- sets/display default workspace setting \u2502 \u2514\u2500\u2500 completion \u2502 \u251c\u2500\u2500 show --- displays what will be added to your shell's rc file \u2502 \u2514\u2500\u2500 install --- enable commands completion for your shell \u251c\u2500\u2500 continue --- continue existing/last time entry \u251c\u2500\u2500 goal --- tracks today's time until your goal is reached \u251c\u2500\u2500 ls --- lists last time entries \u251c\u2500\u2500 now --- show/update currently runnig time entry \u251c\u2500\u2500 project_users --- list all project users in workspace \u251c\u2500\u2500 projects \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 rm --- delete a time entry \u251c\u2500\u2500 start --- starts new time entry \u251c\u2500\u2500 stop --- stops running time entry \u251c\u2500\u2500 sum --- shows summary of totally tracked time based on days \u251c\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 tags \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 signup --- creates new user \u251c\u2500\u2500 workspaces \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 invite --- invites user into the current workspace \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u2514\u2500\u2500 www --- opens web client","title":"Commands overview"},{"location":"cli/#themes","text":"Toggl CLI supports themes in order to be readable in all terminal settings. You can configure it as part of config file using theme option. The possible values are: plain for plain theme without any colors light for light based theme dark for dark based theme","title":"Themes"},{"location":"cli/#shell-completion","text":"Toggl CLI supports commands/options completion for bash , zsh , PowerShell and fish shells. To enable the completion run toggl config completion install . This command will install completion based on your current shell, it mostly consist of adding _TOGGL_COMPLETE variable to your rc file. If you want to inspect details you can run toggl config completion show .","title":"Shell completion"},{"location":"cli/#datetime-formats","text":"Important part of the CLI is parsing of times & dates. Toggl CLI uses in background of dateutil library and it best-effort function dateutil.parse() . This function aims to guess the format of your time or date on best-effort bases. It is possible to influence behaviour of this parser through day_first and year_first settings in config file. See possible settings . Examples: 10:10 ==> <current date> 10:10 14:10 ==> current date> 14:10 2:10 PM ==> current date> 14:10 Nov 12 10:11 AM ==> <current year>-11-12 10:11 # For only day/month dates the first is always day and second is always month 12.11 10:11 ==> <current year>-11-12 10:11 11.12 10:11 ==> <current year>-12-11 10:11 # For ful date (day/month/year) the day_first/year_first setting is applied 12.11.18 10:11 ==> 2018-12-11 10:11 12.11.18 10:11 ==> 2018-11-12 10:11 # When day_first=True 12.11.18 10:11 ==> 2012-11-18 10:11 # When year_first=True More examples can be found at pendulum's documentation","title":"Date/time formats"},{"location":"cli/#duration-formats","text":"Another important part of the CLI is duration syntax for specifying time entries durations if desired. Example: 5h2m10s - 5 hours 2 minutes 10 seconds. Syntax is as follow: 'd' : days 'h' : hours 'm' : minutes 's' : seconds","title":"Duration formats"},{"location":"cli/#environmental-variables","text":"It is possible to specify several options for the CLI commands through environmental variables. This can for example nicely play out for directory specific settings (for example for projects) with direnv tool. Generally this mechanism is available for commands that create new entities. Values specified through this way have priority over config values. You can see which options can be specified in command's help page where at the option's help is used (ENV: <name of variable>) syntax. Bellow you can see general overview of the variables: TOGGL_CONFIG - Defines which config file should be used. Should be absolute path. By default ~/.togglrc is used. TOGGL_WORKSPACE - Defines workspace to be used for the command, can be ID or Name of the Workspace. TOGGL_TASK - Defines task to be used, can be ID or Name of the Task. TOGGL_PROJECT - Defines project to be used, can be ID or Name of the Project. TOGGL_API_TOKEN - Defines Toggl's account which will be used for the API calls. TOGGL_USERNAME - Defines Toggl's account which will be used for the API calls. TOGGL_PASSWORD - Defines Toggl's account which will be used for the API calls.","title":"Environmental variables"}]}